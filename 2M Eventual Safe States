class Solution {
  public:
  
        bool checkRing(int node, int visited[], int pathVisited[], int finalConfig[], vector<int> adj[])
        {
            visited[node] = 1;
            pathVisited[node] = 1;
            
            for(auto child : adj[node])
            {
                if(visited[child] == 0)
                {
                    if(checkRing(child, visited, pathVisited, finalConfig, adj))
                    {
                        return true; // Connected to a Ring..
                    }
                }
                
                else if(pathVisited[child] == 1)
                {
                    return true; // Part of Ring
                }        
            }
            
            finalConfig[node] = 1;
            pathVisited[node] = 0;
            return false;
        }  
  
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        int visited[V] = {0};
        int pathVisited[V] = {0};
        int finalConfig[V] = {0};
        vector<int> safeNodes;
        
        for(int i=0; i<V; i++)
        {
            if(visited[i] == 0)
            {
                checkRing(i, visited, pathVisited, finalConfig, adj);
            }
        }
        
        for(int i=0; i<V; i++)
        {
            if(finalConfig[i] == 1)
            {
                safeNodes.push_back(i);
            }
        }
        
        return safeNodes;
    }
};

// TC & SC - DFS
