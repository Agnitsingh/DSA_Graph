// BFS SOLUTION...

class Solution {
public:
    int wordLadderLength(string startWord, string targetWord, vector<string>& wordList) {
        // Set Banao..
        unordered_set<string> st(wordList.begin(),wordList.end());
        queue<pair<string,int>> q;
        q.push({startWord, 1});
        
        if(st.find(startWord)!=st.end())
        {
            st.erase(startWord);
        }
        
       
        
        while(!q.empty())
        {
            string word = q.front().first;
            int index = q.front().second;
            q.pop();
            if(word == targetWord) return index;
            
            for(int i=0; i<word.size(); i++)
            {
                char org = word[i];
                
                for(char ch = 'a'; ch<='z'; ch++)
                {
                    word[i] = ch;
                    
                    if(st.find(word) != st.end())
                    {
                        st.erase(word);
                        q.push({word, index+1});
                    }
                }
                
                word[i] = org;
            }
        }
        
        return 0;
    }
};
