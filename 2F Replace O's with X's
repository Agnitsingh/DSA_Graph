class Solution{
public:
    
    void dfs(int row, int col, vector<vector<char>> &mat, vector<vector<int>> &visited, int delRow[], int delCol[])
    {
        visited[row][col] = 1;
        int rsize = mat.size();
        int csize = mat[0].size();
        
        for(int i=0; i<4; i++)
        {
            int nr = row+delRow[i];
            int nc = col+delCol[i];
            
            if(nr>=0 && nr<rsize && nc>=0 && nc<csize && mat[nr][nc] == 'O' && visited[nr][nc] == 0)
            {
                dfs(nr,nc,mat,visited,delRow,delCol);
            }
        }
    }


    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        vector<vector<int>> visited(n, vector<int>(m, 0));
        int delRow[] = {-1,0,1,0};
        int delCol[] = {0,1,0,-1};
        
        // Traversing First & Last Row..
        
        for(int i=0; i<m; i++)
        {
            if(visited[0][i] == 0 && mat[0][i] == 'O')
            {
                dfs(0,i,mat,visited,delRow,delCol);
            }
            
            if(visited[n-1][i] == 0 && mat[n-1][i] == 'O')
            {
                dfs(n-1,i,mat,visited,delRow,delCol);
            }
        }
        
        // Traversing First & Last Column..
        
        for(int i=0; i<n; i++)
        {
            if(visited[i][0] == 0 && mat[i][0] == 'O')
            {
                dfs(i,0,mat,visited,delRow,delCol);
            }
            
            if(visited[i][m-1] == 0 && mat[i][m-1] == 'O')
            {
                dfs(i,m-1,mat,visited,delRow,delCol);
            }
        }
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(visited[i][j] == 0 && mat[i][j] == 'O')
                {
                    mat[i][j] = 'X';
                }
            }
        }
        
        return mat;
    }
};

// Expected Time Complexity: O(n*m)
// Expected Auxiliary Space: O(n*m)
