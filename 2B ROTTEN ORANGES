class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    
    int orangesRotting(vector<vector<int>>& grid) {
        
        int row = grid.size();
        int col = grid[0].size();
        queue<pair<pair<int,int>, int>> q;
        int visited[row][col];
        int maxTime = 0;
        
        for(int i=0; i<row; i++)
        {
            for(int j = 0; j<col; j++)
            {
                if(grid[i][j] == 2)
                {
                    q.push({{i,j},0});
                    visited[i][j] = 2;
                }
                else
                {
                    visited[i][j] = 0;
                }
            }
        }
        
        while(!q.empty())
        {
            int r = q.front().first.first;
            int c = q.front().first.second;
            int tm = q.front().second;
            maxTime = max(maxTime, tm);
            q.pop();
            
            int nRow[] = {-1,0,1,0};
            int nCol[] = {0,1,0,-1};
            
            for(int i=0; i<4; i++)
            {
                int newRow = r+nRow[i];
                int newCol = c+nCol[i];
                
                if(newRow>=0 && newRow<row && newCol>=0 && newCol<col && visited[newRow][newCol] != 2 && grid[newRow][newCol] == 1)
                {
                    q.push({{newRow,newCol},tm+1});
                    visited[newRow][newCol] = 2;
                }
            }
        }
        
        for(int i=0; i<row; i++)
        {
            for(int j=0; j<col; j++)
            {
                if(visited[i][j]!=2 && grid[i][j] == 1)
                {
                    return -1;
                }
            }
        }
        
        return maxTime;
        
    }
};

// Expected Time Complexity: O(n*m)
// Expected Auxiliary Space: O(n*m)
