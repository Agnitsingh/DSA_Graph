class Solution {
  public:
    int numberOfEnclaves(vector<vector<int>> &grid) {
        int n = grid.size();
        int m = grid[0].size();;
        
        vector<vector<int>> visited(n, vector<int>(m,0));
        queue<pair<int,int>> q;
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(i==0 || j==0 || i==n-1 || j==m-1)
                {
                    if(grid[i][j] == 1)
                    {
                        visited[i][j] = 1;
                        q.push({i,j});
                    }
                }
            }
        }
        
        int dR[] = {-1,0,1,0};
        int dC[] = {0,1,0,-1};
        
        while(!q.empty())
        {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            
            for(int i=0; i<4; i++)
            {
                int nr = row + dR[i];
                int nc = col + dC[i];
                
                if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc] == 1 && visited[nr][nc] == 0)
                {
                    q.push({nr,nc});
                    visited[nr][nc] = 1;
                }
            }
        }
        
        int count = 0;
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(grid[i][j] == 1 && visited[i][j] == 0)
                {
                    count = count+1;
                }
            }
        }
        
        return count;
    }
};

// TC & SC - O(n*m)
